{"version":3,"sources":["enums.tsx","Consts.tsx","Models.tsx","App.tsx","index.tsx"],"names":["signs","colors","values","show","CardModel","sign","value","this","Deck","cards","forEach","push","club","diamond","heart","spade","App","props","state","myCards","enemyCards","deck","over","sum","enemySum","stop","className","Header","size","Button","onClick","rnd","Math","floor","random","length","temp","splice","enemyTemp","setState","map","card","Card","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46430d4b.chunk.js","sourcesContent":["export enum signs {\r\n  spade = \"spade\",\r\n  heart = \"heart\",\r\n  diamond = \"diamond\",\r\n  club = \"club\",\r\n}\r\n\r\nexport enum colors {\r\n  spade = \"black\",\r\n  heart = \"red\",\r\n  diamond = \"red\",\r\n  club = \"black\",\r\n}\r\n","export const values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\r\n\r\nexport const show = [\r\n  \"A\",\r\n  \"2\",\r\n  \"3\",\r\n  \"4\",\r\n  \"5\",\r\n  \"6\",\r\n  \"7\",\r\n  \"8\",\r\n  \"9\",\r\n  \"10\",\r\n  \"J\",\r\n  \"Q\",\r\n  \"K\",\r\n];\r\n","import { values } from \"./Consts\";\r\nimport { signs } from \"./enums\";\r\n\r\nexport class CardModel {\r\n  sign: string;\r\n  value: number;\r\n\r\n  constructor(sign: string, value: number) {\r\n    this.sign = sign;\r\n    this.value = value;\r\n  }\r\n}\r\n\r\nexport class Deck {\r\n  cards: CardModel[];\r\n\r\n  constructor() {\r\n    this.cards = [];\r\n    values.forEach((value) => {\r\n      this.cards.push(new CardModel(signs.club, value));\r\n      this.cards.push(new CardModel(signs.diamond, value));\r\n      this.cards.push(new CardModel(signs.heart, value));\r\n      this.cards.push(new CardModel(signs.spade, value));\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Button, Header, Card } from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"./App.css\";\r\nimport { Deck, CardModel } from \"./Models\";\r\nimport { show } from \"./Consts\";\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {\r\n  myCards: CardModel[];\r\n  enemyCards: CardModel[];\r\n  deck: Deck;\r\n  over: boolean;\r\n  sum: number;\r\n  enemySum: number;\r\n  stop: boolean;\r\n}\r\n\r\nclass App extends Component<IProps, IState> {\r\n  constructor(props: Readonly<IProps>) {\r\n    super(props);\r\n    this.state = {\r\n      myCards: [],\r\n      enemyCards: [],\r\n      deck: new Deck(),\r\n      over: false,\r\n      sum: 0,\r\n      enemySum: 0,\r\n      stop: false,\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"my-bj\">\r\n        <Header className=\"my-header\" size=\"huge\">\r\n          Blackjack\r\n        </Header>\r\n        <Header className=\"score\">\r\n          {(this.state.sum > 21 ||\r\n            (this.state.enemySum > this.state.sum && this.state.over)) &&\r\n          this.state.enemySum <= 21\r\n            ? \"You lost\"\r\n            : this.state.over\r\n            ? this.state.sum === this.state.enemySum\r\n              ? \"You tied\"\r\n              : \"You won\"\r\n            : \"Your Turn\"}\r\n        </Header>{\" \"}\r\n        <Button\r\n          className=\"my-button\"\r\n          onClick={() => {\r\n            if (this.state.sum < 21 && !this.state.over) {\r\n              let rnd = Math.floor(\r\n                Math.random() * this.state.deck.cards.length\r\n              );\r\n              this.state.myCards.push(this.state.deck.cards[rnd]);\r\n              const temp =\r\n                this.state.deck.cards[rnd].value > 10\r\n                  ? 10\r\n                  : this.state.deck.cards[rnd].value;\r\n              this.state.deck.cards.splice(rnd, 1);\r\n\r\n              let enemyTemp = 0;\r\n              let stop = this.state.stop;\r\n              if (this.state.enemySum <= 16 && this.state.sum + temp <= 21) {\r\n                rnd = Math.floor(Math.random() * this.state.deck.cards.length);\r\n                this.state.enemyCards.push(this.state.deck.cards[rnd]);\r\n                enemyTemp =\r\n                  this.state.deck.cards[rnd].value > 10\r\n                    ? 10\r\n                    : this.state.deck.cards[rnd].value;\r\n                this.state.deck.cards.splice(rnd, 1);\r\n              } else {\r\n                stop = true;\r\n              }\r\n\r\n              this.setState({\r\n                sum: this.state.sum + temp,\r\n                enemySum: this.state.enemySum + enemyTemp,\r\n                over: this.state.enemySum + enemyTemp > 21,\r\n                stop: stop,\r\n              });\r\n            }\r\n          }}\r\n        >\r\n          Hit\r\n        </Button>\r\n        <Button\r\n          className=\"my-button\"\r\n          onClick={() => {\r\n            if (this.state.sum > 21 || this.state.over) {\r\n              this.setState({\r\n                myCards: [],\r\n                enemyCards: [],\r\n                deck: new Deck(),\r\n                over: false,\r\n                sum: 0,\r\n                enemySum: 0,\r\n                stop: false,\r\n              });\r\n            } else {\r\n              let enemyTemp = 0;\r\n              const temp = this.state.deck.cards;\r\n              let rnd = Math.floor(Math.random() * temp.length);\r\n\r\n              while (\r\n                this.state.enemySum + enemyTemp < this.state.sum &&\r\n                !this.state.stop\r\n              ) {\r\n                this.state.enemyCards.push(temp[rnd]);\r\n                enemyTemp += temp[rnd].value > 10 ? 10 : temp[rnd].value;\r\n                temp.splice(rnd, 1);\r\n                rnd = Math.floor(Math.random() * temp.length);\r\n              }\r\n              this.setState({\r\n                enemySum: this.state.enemySum + enemyTemp,\r\n                over: true,\r\n              });\r\n            }\r\n          }}\r\n        >\r\n          {this.state.sum > 21 || this.state.over ? \"Start Again\" : \"Finish\"}\r\n        </Button>\r\n        <div className=\"cards\">\r\n          <div className=\"width\">\r\n            <Header className=\"score\">{\"You:\"}</Header>\r\n            <Header className=\"score-number\">{this.state.sum}</Header>\r\n            <div className=\"cards-info\">\r\n              {this.state.myCards.map((card: CardModel) => {\r\n                return (\r\n                  <Card className=\"my-card\">\r\n                    <Header>{card.sign}</Header>\r\n                    {card.value}\r\n                  </Card>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n          <div className=\"width\">\r\n            <Header className=\"score\">{\"Enemy:\"}</Header>\r\n            <Header className=\"score-number\">{this.state.enemySum}</Header>\r\n            <div className=\"cards-info\">\r\n              {this.state.enemyCards.map((card: CardModel) => {\r\n                return (\r\n                  <Card className=\"my-card\">\r\n                    <Header>{card.sign}</Header>\r\n                    {show[card.value - 1]}\r\n                  </Card>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}